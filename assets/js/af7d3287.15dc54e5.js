"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[3541],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(y,i(i({ref:t},p),{},{components:a})):n.createElement(y,i({ref:t},p))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},304:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294);const r={anatomy:"How Lamby Works",cpu:"CPU Architecture",environment:"ENV Variables & Secrets",assets:"JavaScript & Assets",deploy:"Build & Deploy","custom-domain":"Custom Domain Names",activejob:"ActiveJob & Background Processing",observability:"Logging & Observability",database:"Database & VPCs",webservers:"Web Proxy Integrations"};function o(e){let{id:t,name:a,anchor:o}=e;const i=a||r[t]||t.replace(/(_|-)/g," ").split(" ").map((e=>e.charAt(0).toUpperCase()+e.toLowerCase().slice(1))).join(" ");return o?n.createElement("a",{href:`/docs/${t}#${o}`},i):n.createElement("a",{href:`/docs/${t}`},i)}},8222:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),o=a(304);const i={id:"environment",title:"ENV Variables & Secrets",toc_max_heading_level:2},s="Environment Configuration & Secrets",l={unversionedId:"environment",id:"environment",title:"ENV Variables & Secrets",description:'Most Rails applications require over a dozen environment variables to configure itself along with other popular gems used. Most notable is ActiveRecord\'s DATABASE_URL. There are numerous ways to configure environment variables ranging from "quick and dirty" by adding secrets to your git repo (\u26a0\ufe0f) all the way to a strict "separation of config" from code using countless methods to achieve a proper Twelve-Factor application. We want to cover a few topics that may help you pick and choose what works best for you.',source:"@site/docs/environment.mdx",sourceDirName:".",slug:"/environment",permalink:"/docs/environment",draft:!1,editUrl:"https://github.com/rails-lambda/lamby-site/tree/master/docs/environment.mdx",tags:[],version:"current",frontMatter:{id:"environment",title:"ENV Variables & Secrets",toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"CPU Architecture",permalink:"/docs/cpu"},next:{title:"Database & VPCs",permalink:"/docs/database"}},c={},p=[{value:"Configuration",id:"configuration",level:2},{value:"Secrets with Crypteia",id:"secrets-with-crypteia",level:2},{value:"About SECRET_KEY_BASE",id:"about-secret_key_base",level:2},{value:"Modern IAM Role Usage",id:"modern-iam-role-usage",level:2}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"environment-configuration--secrets"},"Environment Configuration & Secrets"),(0,r.kt)("p",null,"Most Rails applications require over a dozen environment variables to configure itself along with other popular gems used. Most notable is ActiveRecord's ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL"),'. There are numerous ways to configure environment variables ranging from "quick and dirty" by adding secrets to your git repo (\u26a0\ufe0f) all the way to a strict "separation of config" from code using countless methods to achieve a proper ',(0,r.kt)("a",{parentName:"p",href:"https://12factor.net/config"},"Twelve-Factor")," application. We want to cover a few topics that may help you pick and choose what works best for you."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"You can add simple configurations to your all of your function's environment using SAM's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html"},"global section"),". Configurations like these are ones that you feel safe comitting to your git repo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yaml"',title:'"template.yaml"'},"Globals:\n  Environment:\n    Variables:\n      SOME_SERVICE_URL: https://prod.some-service.com/api\n")),(0,r.kt)("p",null,"If you deploy to multiple environments, you can even have these be dynamic by leveraging CloudFormation's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html"},"mappings"),". Here is an example that builds on our ",(0,r.kt)("inlineCode",{parentName:"p"},"RailsEnv")," parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yaml"',title:'"template.yaml"'},"Mappings:\n  SomeService:\n    staging:\n      Url: https://staging.some-service.com/api\n    production:\n      Url: https://prod.some-service.com/api\n# ...\nGlobals:\n  Environment:\n    Variables:\n      SOME_SERVICE_URL: !FindInMap [SomeService, !Ref RailsEnv, Url]\n")),(0,r.kt)("h2",{id:"secrets-with-crypteia"},"Secrets with Crypteia"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rails-lambda/crypteia"},"Crypteia")," package is Rust Lambda Extension for any Runtime/Container to preload SSM Parameters as secure environment variables. It takes advantages of ",(0,r.kt)("inlineCode",{parentName:"p"},"LD_PRELOAD")," to seamlessly fetch values from SSM when a process starts and then injects them as natively accesible Ruby ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV")," variables. Our ",(0,r.kt)(o.Z,{id:"quick-start",mdxType:"DocLink"})," guide's cookiecutter includes Crypteia already for you via a Docker ",(0,r.kt)("inlineCode",{parentName:"p"},"COPY")," command into the Lambda Extension ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-docker",metastring:'title="Dockerfile"',title:'"Dockerfile"'},"FROM ruby:3.2-bullseye\n# highlight-next-line\nCOPY --from=ghcr.io/rails-lambda/crypteia-extension-debian:1 /opt /opt\n")),(0,r.kt)("p",null,"Usage is simply done by adding variables to your SAM template and accessing the values fetched from SSM like any other environment variable. Please read the Crypteia's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rails-lambda/crypteia"},"documentation")," for full details on how to add ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rails-lambda/crypteia#iam-permissions"},"IAM Permissions")," to read SSM Parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:'language-title="template.yaml"'},"Globals:\n  Environment:\n    Variables:\n      SECRET: x-crypteia-ssm:/myapp/SECRET\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"ENV['SECRET'] # 1A2B3C4D5E6F\n")),(0,r.kt)("h2",{id:"about-secret_key_base"},"About SECRET_KEY_BASE"),(0,r.kt)("p",null,"Our ",(0,r.kt)(o.Z,{id:"quick-start",name:"cookiecutter",mdxType:"DocLink"})," project disabled Rails encrypted credentials in favor of a more simple ",(0,r.kt)("inlineCode",{parentName:"p"},"SECRET_KEY_BASE")," setting. The starter project places a temporary value for this environment variable in the ",(0,r.kt)("inlineCode",{parentName:"p"},"config/initializers/secret_key_base.rb")," file. Please remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV['SECRET_KEY_BASE'] = '0123...'")," line and use Crypteia as described above."),(0,r.kt)("h2",{id:"modern-iam-role-usage"},"Modern IAM Role Usage"),(0,r.kt)("p",null,"If your application uses other AWS resources like EventBridge or S3, you may be using environment variables like ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS_ACCESS_KEY_ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS_SECRET_ACCESS_KEY"),". ",(0,r.kt)("strong",{parentName:"p"},"Avoid this pattern.")," Instead, please add explicit IAM policies within your ",(0,r.kt)("inlineCode",{parentName:"p"},"template.yaml")," file. They will be attached to your Lambda's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html"},"Execution Role")," and inherently give your Lambda the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-permissions.html"},"needed permissions"),". AWS is constantly making IAM permissions more approachable. There are two high level interfaces within SAM to connect your application to cloud resources. Newest first:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/managing-permissions-connectors.html"},"AWS SAM Connectors"),": Are an AWS SAM abstract resource type, identified as ",(0,r.kt)("inlineCode",{parentName:"li"},"AWS::Serverless::Connector"),", that can be defined in your AWS SAM templates to grant Read and Write access of data and events from a supported AWS resource to another."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html"},"AWS SAM Policy Templates"),": Are pre-defined sets of permissions that you can add to your AWS SAM templates to manage access and permissions between your AWS Lambda functions, AWS Step Functions state machines and the resources they interact with.")),(0,r.kt)("p",null,"If needed, you can use the lower level ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-policies"},(0,r.kt)("inlineCode",{parentName:"a"},"Policies"))," property of your ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS::Serverless::Function")," resource to attach any inline policies to your application's IAM Role."))}u.isMDXComponent=!0}}]);