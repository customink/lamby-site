"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[661],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},304:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294);const r={anatomy:"How Lamby Works",cpu:"CPU Architecture",environment:"ENV Variables & Secrets",assets:"JavaScript & Assets",deploy:"Build & Deploy","custom-domain":"Custom Domain Names",activejob:"ActiveJob & Background Processing",observability:"Logging & Observability",database:"Database & VPCs",webservers:"Web Proxy Integrations"};function i(e){let{id:t,name:a,anchor:i}=e;const o=a||r[t]||t.replace(/(_|-)/g," ").split(" ").map((e=>e.charAt(0).toUpperCase()+e.toLowerCase().slice(1))).join(" ");return i?n.createElement("a",{href:`/docs/${t}#${i}`},o):n.createElement("a",{href:`/docs/${t}`},o)}},5832:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),i=a(304),o=a(941),s=a(4996);const l={id:"assets",title:"JavaScript & Assets",toc_max_heading_level:2},c="JavaScript & Assets",p={unversionedId:"assets",id:"assets",title:"JavaScript & Assets",description:"Assets require a  to link properly when using API Gateway. For Function URLs, the work out of the box. Both API Gateway and Function URLs can benefit from a CloudFront CDN to cache /assets and avoid hitting your backend function on each request.",source:"@site/docs/assets.mdx",sourceDirName:".",slug:"/assets",permalink:"/docs/assets",draft:!1,editUrl:"https://github.com/customink/lamby-site/tree/master/docs/assets.mdx",tags:[],version:"current",frontMatter:{id:"assets",title:"JavaScript & Assets",toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"Database & VPCs",permalink:"/docs/database"},next:{title:"Logging & Observability",permalink:"/docs/observability"}},d={},u=[{value:"Serving Static Assets",id:"serving-static-assets",level:2},{value:"Adding CloudFront",id:"adding-cloudfront",level:2},{value:"JavaScript Ready",id:"javascript-ready",level:2}],m={toc:u};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"javascript--assets"},"JavaScript & Assets"),(0,r.kt)("p",null,"Assets require a ",(0,r.kt)(i.Z,{id:"custom-domain",name:"Custom Domain Name",mdxType:"DocLink"})," to link properly when using API Gateway. For Function URLs, the work out of the box. Both API Gateway and Function URLs can benefit from a CloudFront CDN to cache ",(0,r.kt)("inlineCode",{parentName:"p"},"/assets")," and avoid hitting your backend function on each request."),(0,r.kt)("h2",{id:"serving-static-assets"},"Serving Static Assets"),(0,r.kt)("p",null,"Our ",(0,r.kt)(i.Z,{id:"quick-start",mdxType:"DocLink"})," cookiecutter project leverages Rails' built in ability to serve static assets. We do this by setting this environment variable in your ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-docker",metastring:'title="Dockerfile"',title:'"Dockerfile"'},"ENV RAILS_SERVE_STATIC_FILES=1\n")),(0,r.kt)("p",null,"We also add this configuration to your ",(0,r.kt)("inlineCode",{parentName:"p"},"config/environments/production.rb")," file. In this case we are setting the cache control to 30 days, which you can change. The ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Lamby-Base64")," header signals to the Lamby rack adapter that the content requires base64 binary encoding."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="config/environments/production.rb"',title:'"config/environments/production.rb"'},"config.public_file_server.headers = {\n  'Cache-Control' => \"public, max-age=#{30.days.seconds.to_i}\",\n  'X-Lamby-Base64' => '1'\n}\n")),(0,r.kt)("h2",{id:"adding-cloudfront"},"Adding CloudFront"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cloudfront/"},"CloudFront")," is an amazing CDN and is pretty easy to setup with Rails. Simply point CloudFront to your Rails app and allow the origin to set the cache headers. Because we set the ",(0,r.kt)("inlineCode",{parentName:"p"},"public_file_server")," headers above, everything should work out perfectly. Assuming you have setup a ",(0,r.kt)(i.Z,{id:"custom-domain",name:"Custom Domain Name",mdxType:"DocLink"})," via CloudFront, here is how to setup an behavior for your ",(0,r.kt)("inlineCode",{parentName:"p"},"/assets")," path. From your CloudFront distribution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Click the "Behaviors" tab '),(0,r.kt)("li",{parentName:"ul"},'Click "Create Behavior" button'),(0,r.kt)("li",{parentName:"ul"},"Path Pattern: ",(0,r.kt)("inlineCode",{parentName:"li"},"/assets/*")),(0,r.kt)("li",{parentName:"ul"},"Select your API Gateway or Function URL origin."),(0,r.kt)("li",{parentName:"ul"},"Compress objects automatically: Yes"),(0,r.kt)("li",{parentName:"ul"},"Viewer protocol policy: Redirect HTTP to HTTPS"),(0,r.kt)("li",{parentName:"ul"},"Allowed HTTP Methods: GET, HEAD"),(0,r.kt)("li",{parentName:"ul"},"Restrict viewer access: No"),(0,r.kt)("li",{parentName:"ul"},"\ud83d\udd18 Cache policy and origin request policy (recommended)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Cache policy: CachingOptimized"),(0,r.kt)("li",{parentName:"ul"},"Origin request policy: None")))),(0,r.kt)("h2",{id:"javascript-ready"},"JavaScript Ready"),(0,r.kt)("p",null,"Our ",(0,r.kt)(i.Z,{id:"quick-start",mdxType:"DocLink"})," cookiecutter project is ready to hit the ground running with all the latest Rails defaults for JavaScript & CSS development. We do this by adding Node.js to the development container which is also used to build your production image. See our ",(0,r.kt)(i.Z,{id:"anatomy",mdxType:"DocLink"})," guide for details."),(0,r.kt)("p",null,"For example, we can add the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rails/tailwindcss-rails"},"TailwindCSS Rails")," gem, run the ",(0,r.kt)("inlineCode",{parentName:"p"},"./bin/rails tailwindcss:install")," command, and edit the temporary starter index page like so. Once redeployed, we should see our Hello TailwindCSS page working correctly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="Gemfile"',title:'"Gemfile"'},"gem 'tailwindcss-rails'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="app/views/application/index.html.erb"',title:'"app/views/application/index.html.erb"'},'<h1 class="\n    text-center\n    text-9xl\n    text-blue-400\n    mt-5\n    ">Hello TailwindCSS</h1>\n')),(0,r.kt)(o.Z,{alt:"TailwindCSS on Rails on Lambda",sources:{light:(0,s.Z)("/img/docs/tailwindcss-light.png"),dark:(0,s.Z)("/img/docs/tailwindcss-dark.png")},mdxType:"ThemedImage"}))}h.isMDXComponent=!0}}]);