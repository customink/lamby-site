"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome-to-lamby-v4","metadata":{"permalink":"/blog/welcome-to-lamby-v4","source":"@site/blog/2022-12-19-welcome-to-lamby-v4.mdx","title":"Welcome Lamby v4!","description":"I am incredibly happy to announcy Lamby v4 and a major update to our documentation website. Huge shout out to Docusaurus which has made in my opinion the best content-driven static site generator for open-source projects like our Lamby community.","date":"2022-12-19T00:00:00.000Z","formattedDate":"December 19, 2022","tags":[{"label":"rails","permalink":"/blog/tags/rails"},{"label":"lambda","permalink":"/blog/tags/lambda"},{"label":"containers","permalink":"/blog/tags/containers"}],"readingTime":3.065,"hasTruncateMarker":false,"authors":[{"name":"Ken Collins","title":"Principal Engineer & Cloud Architect","url":"https://dev.to/metaskills","imageURL":"https://github.com/metaskills.png","key":"kcollins"}],"frontMatter":{"slug":"welcome-to-lamby-v4","title":"Welcome Lamby v4!","authors":["kcollins"],"tags":["rails","lambda","containers"]}},"content":"import DocLink from \\"../src/components/DocLink.js\\";\\nimport ThemedImage from \\"@theme/ThemedImage\\";\\nimport useBaseUrl from \\"@docusaurus/useBaseUrl\\";\\n\\nI am incredibly happy to announcy Lamby v4 and a major update to our documentation website. Huge shout out to [Docusaurus](https://docusaurus.io) which has made in my opinion the best content-driven static site generator for open-source projects like our Lamby community.\\n\\n<ThemedImage\\n  alt=\\"Lamby: Simple Rails & AWS Lambda Integration using Rack\\"\\n  sources={{\\n    light: useBaseUrl(\\"/img/lamby-rails-containers.jpg\\"),\\n    dark: useBaseUrl(\\"/img/lamby-rails-dark.jpg\\"),\\n  }}\\n/>\\n\\nSo what is new and will v4 break anything? Lots! Mostly new ways of thinking around the same basic architecture. Nothing should break either. Lamby v4\'s semver change is mostly marketing driven. Here is a short list of what is new.\\n\\n## Updated Starter\\n\\nWant to see all this new stuff in action? Use our <DocLink id=\\"quick-start\\" /> guide to deploy a new Rails application to AWS Lambda in 5min \u23f1\ufe0f.\\n\\n## Bring Your Own Containers\\n\\nLamby still works with the Zip packaging format, but all documentation on how to use it has been removed. Containers are here to stay and their value goes way past a simple packaging format.\\n\\n```mermaid\\n%%{init:{\'flowchart\':{\'nodeSpacing\': 20, \'rankSpacing\': 20}}}%%\\nflowchart LR\\n  %% Objects\\n  src-furl(Lambda Function URLs)\\n  src-apih(API Gateway HTTP API)\\n  src-apir(API Gateway REST API)\\n  src-alb(Application Load Balancer)\\n  invoke[/invoke/]\\n  lambda[Lambda Function]\\n  subgraph container[\\"Container Image\\"]\\n    direction LR\\n    ric[RIC -> config/env.Lamby.cmd]:::rics\\n    app[Event -> Rack -> Rails::App]:::pink\\n    os[Operatring System & Packages]:::desc\\n  end\\n  %% Flow\\n  src-furl --\x3e |Event| invoke\\n  src-apih --\x3e |Event v1 or v2| invoke\\n  src-apir --\x3e |Event| invoke\\n  src-alb --\x3e |Event| invoke\\n  invoke --\x3e lambda\\n  lambda --\x3e ric\\n  %% Styles\\n  classDef node fill:#a99ff0,stroke:#fff,stroke-width:4px,color:#000;\\n  classDef pink fill:#fe4f8b,stroke:#fff,stroke-width:4px,color:#fff;\\n  classDef orange fill:#ed8235,stroke:#fff,stroke-width:4px,color:#fff;\\n  classDef cont fill:#c6fffd,stroke:#70d6d2,stroke-width:4px,color:black,font-size:12px;\\n  classDef rics fill:#a99ff0,stroke:#fff,stroke-width:4px,color:#000;\\n  classDef desc fill:white,stroke:#ccc,stroke-width:2px,color:black;\\n  %% ,font-size:12px\\n  class src-apir,src-apih pink\\n  class src-alb orange\\n  class container cont\\n  class ric rics\\n```\\n\\nWe now encourage bringing your own containers by using Lambda\'s Runtime Interface Client (RIC). The RIC allows us to use Docker\'s `CMD` to load Rails and invoke a function. In this case we are loading our Rails application through its config/environment.rb file (.rb extension is implied) and once that is done, calling the new `Lamby.cmd` as the Lambda handler. No more `app.rb`\\nfile needed!\\n\\n```docker title=\\"Dockerfile\\"\\nFROM ruby:3.2-bullseye\\nRUN gem install \'aws_lambda_ric\'\\nENTRYPOINT [ \\"/usr/local/bundle/bin/aws_lambda_ric\\" ]\\nCMD [\\"config/environment.Lamby.cmd\\"]\\n```\\n\\n## Secrets with Crypteia\\n\\nThe [Crypteia](https://github.com/rails-lambda/crypteia) package is Rust Lambda Extension for any Runtime/Container to preload SSM Parameters as secure environment variables. It takes advantages of `LD_PRELOAD` to seamlessly fetch values from SSM when a process starts and then injects them as natively accesible Ruby `ENV` variables. Our <DocLink id=\\"quick-start\\" /> guide\'s cookiecutter includes Crypteia already for you via a Docker `COPY` command into the Lambda Extension `/opt` directory.\\n\\n```docker title=\\"Dockerfile\\"\\nFROM ruby:3.2-bullseye\\n# highlight-next-line\\nCOPY --from=ghcr.io/rails-lambda/crypteia-extension-debian:latest /opt /opt\\n```\\n\\nUsage is simply done by adding variables to your SAM template and accessing the values fetched from SSM like any other environment variable. Please read the Crypteia\'s [documentation](https://github.com/rails-lambda/crypteia) for full details.\\n\\n```title=\\"template.yaml\\"\\nGlobals:\\n  Environment:\\n    Variables:\\n      SECRET: x-crypteia-ssm:/myapp/SECRET\\n```\\n\\n```ruby\\nENV[\'SECRET\'] # 1A2B3C4D5E6F\\n```\\n\\n## Development Containers\\n\\nDescribed in the <DocLink id=\\"quick-start\\" /> guide, our Lamby starter makes use of the [Development Container](https://containers.dev) specification via a [`.devcontainer`](https://github.com/rails-lambda/lamby-cookiecutter/tree/master/%7B%7Bcookiecutter.project_name%7D%7D/.devcontainer) directory. Commonly used with Codespaces, dev containers can be used locally with any editor.\\n\\nOur dev container\'s `Dockerfile` uses the same base image as the one at the root of your project. This helps ensure your development experience, like installing system dependencies and Ruby gems with native extensions, aligns with the same process as your production image.\\n\\nWe also leverage the devcontainer\'s `dockerComposeFile` capability to include a MySQL service as well. The Lamby starter also includes a range of [devcontainer features](https://containers.dev/features) which are installed within the Ubuntu development image. For example, Node, Docker in Docker, SSH, and the AWS CLI & SAM CLI."}]}')}}]);