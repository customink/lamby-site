"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[747],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>b});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(a),p=n,b=u["".concat(c,".").concat(p)]||u[p]||d[p]||i;return a?r.createElement(b,o(o({ref:t},m),{},{components:a})):r.createElement(b,o({ref:t},m))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},304:(e,t,a)=>{a.d(t,{Z:()=>i});var r=a(7294);const n={anatomy:"How Lamby Works",cpu:"CPU Architecture",environment:"ENV Variables & Secrets",assets:"JavaScript & Assets",deploy:"Build & Deploy","custom-domain":"Custom Domain Names",activejob:"ActiveJob & Background Processing",observability:"Logging & Observability",database:"Database & VPCs",webservers:"Web Proxy Integrations"};function i(e){let{id:t,name:a}=e;const i=a||n[t]||t.replace(/(_|-)/g," ").split(" ").map((e=>e.charAt(0).toUpperCase()+e.toLowerCase().slice(1))).join(" ");return r.createElement("a",{href:`/docs/${t}`},i)}},3391:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>m});var r=a(7462),n=(a(7294),a(3905)),i=a(304);const o={id:"activejob",title:"ActiveJob & Background Processing",toc_max_heading_level:2},s="ActiveJob & Background Processing",c={unversionedId:"activejob",id:"activejob",title:"ActiveJob & Background Processing",description:"Lambdakiq",source:"@site/docs/activejob.mdx",sourceDirName:".",slug:"/activejob",permalink:"/docs/activejob",draft:!1,editUrl:"https://github.com/customink/lamby-site/tree/master/docs/activejob.mdx",tags:[],version:"current",frontMatter:{id:"activejob",title:"ActiveJob & Background Processing",toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"Logging & Observability",permalink:"/docs/observability"},next:{title:"Running Tasks",permalink:"/docs/running-tasks"}},l={},m=[{value:"Lambdakiq",id:"lambdakiq",level:2},{value:"LambdaPunch",id:"lambdapunch",level:2}],u={toc:m};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"activejob--background-processing"},"ActiveJob & Background Processing"),(0,n.kt)("h2",{id:"lambdakiq"},"Lambdakiq"),(0,n.kt)("a",{href:"https://github.com/customink/lambdakiq"},(0,n.kt)("img",{alt:"Lambdakiq - ActiveJob on SQS & Lambda",src:a(8216).Z,style:{width:"50%",float:"right",marginLeft:"2rem",marginBottom:"1rem"}})),(0,n.kt)("p",null,"Using ActiveJob on AWS Lambda is a reimagination of the problem for Rails. Instead of starting up long running process that polls for work, we instead use the event-driven architecture of AWS Lambda to our advantage using a gem named ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/customink/lambdakiq"},"Lambdakiq")," which is mostly a drop-in replacement for ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mperham/sidekiq"},"Sidekiq"),". "),(0,n.kt)("p",null,"It allows you to leverage AWS' managed infrastructure to the fullest extent. Gone are the days of managing pods and long polling processes. Instead AWS delivers messages directly to your Rails' job functions and scales it up and down as needed. Observability is built in using AWS CloudWatch Metrics, Dashboards, and Alarms. Key Features:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Distinct web & jobs Lambda functions."),(0,n.kt)("li",{parentName:"ul"},"AWS fully managed polling. Event-driven."),(0,n.kt)("li",{parentName:"ul"},"Maximum 12 retries. Per job configurable."),(0,n.kt)("li",{parentName:"ul"},"Mirror Sidekiq's retry ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mperham/sidekiq/wiki/Error-Handling#automatic-job-retry"},"backoff")," timing."),(0,n.kt)("li",{parentName:"ul"},"Last retry is at 11 hours 30 minutes."),(0,n.kt)("li",{parentName:"ul"},"Supports ActiveJob's wait/delay. Up to 15 minutes."),(0,n.kt)("li",{parentName:"ul"},"Dead messages are stored for up to 14 days.")),(0,n.kt)("p",null,"Learn more on GitHub: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/customink/lambdakiq"},"https://github.com/customink/lambdakiq")),(0,n.kt)("h2",{id:"lambdapunch"},"LambdaPunch"),(0,n.kt)("a",{href:"https://github.com/customink/lambda_punch"},(0,n.kt)("img",{alt:"Async Processing Using Lambda Extensions",src:a(5915).Z,style:{width:"50%",float:"right",marginLeft:"2rem",marginBottom:"1rem"}})),(0,n.kt)("p",null,"You may need lightweight background job processing similiar to how ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/brandonhilkert/sucker_punch"},"SuckerPunch")," gem works. The only way to do this for Lambda is to use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/customink/lambda_punch"},"LambdaPunnch")," gem. LambdaPunch is a ",(0,n.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-extensions-api.html"},"Lambda Extensions")," that works with the Lambda invoke model. This solution is required if you are using New Relic as described in our ",(0,n.kt)(i.Z,{id:"observability",mdxType:"DocLink"})," guide."),(0,n.kt)("p",null,"Learn more on GitHub: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/customink/lambda_punch"},"https://github.com/customink/lambda_punch")))}d.isMDXComponent=!0},8216:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/lambdakiq-72705d06e565797acb505046ce6c3a34.png"},5915:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/lambdapunch-b6fb9d6edbbc85d7d14f0230629a6278.png"}}]);