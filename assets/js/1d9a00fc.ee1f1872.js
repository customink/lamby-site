"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[6346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,b=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(b,r(r({ref:t},m),{},{components:n})):a.createElement(b,r({ref:t},m))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(7462),i=(n(7294),n(3905)),o=n(941),r=n(4996);const l={title:"Goodbye Cold Starts, Hello Proactive Initialization",authors:["kcollins"],tags:["rails","lambda","cold-starts","initialization"],image:"img/blog/proactive-init/lamby-cloud-watch-metrics-cold-start-v-proactive-init-dark.png"},s=void 0,c={permalink:"/blog/2023/07/16/good-bye-cold-starts-hello-proactive-initilizations",source:"@site/blog/2023-07-16-good-bye-cold-starts-hello-proactive-initilizations.mdx",title:"Goodbye Cold Starts, Hello Proactive Initialization",description:"As described in AJ Stuyvenberg's post on the topic Understanding AWS Lambda Proactive Initialization, AWS Lambda may have solved some of your cold start issues for you since March 2023. Stated in an excerpt from AWS' docs:",date:"2023-07-16T00:00:00.000Z",formattedDate:"July 16, 2023",tags:[{label:"rails",permalink:"/blog/tags/rails"},{label:"lambda",permalink:"/blog/tags/lambda"},{label:"cold-starts",permalink:"/blog/tags/cold-starts"},{label:"initialization",permalink:"/blog/tags/initialization"}],readingTime:1.44,hasTruncateMarker:!0,authors:[{name:"Ken Collins",title:"Principal Engineer & Cloud Architect",url:"https://dev.to/metaskills",imageURL:"https://github.com/metaskills.png",key:"kcollins"}],frontMatter:{title:"Goodbye Cold Starts, Hello Proactive Initialization",authors:["kcollins"],tags:["rails","lambda","cold-starts","initialization"],image:"img/blog/proactive-init/lamby-cloud-watch-metrics-cold-start-v-proactive-init-dark.png"},nextItem:{title:"The Elusive Lambda Console; A Specification Proposal.",permalink:"/blog/the-elusive-lambda-console-a-specification-proposal"}},m={authorsImageUrls:[void 0]},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As described in ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/astuyve"},"AJ Stuyvenberg's")," post on the topic ",(0,i.kt)("a",{parentName:"p",href:"https://aaronstuyvenberg.com/posts/understanding-proactive-initialization"},"Understanding AWS Lambda Proactive Initialization"),", AWS Lambda may have solved some of your cold start issues for you since March 2023. Stated in an excerpt ",(0,i.kt)("a",{parentName:"p",href:"https://aaronstuyvenberg.com/posts/understanding-proactive-initialization"},"from AWS' docs"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For functions using unreserved (on-demand) concurrency, Lambda occasionally pre-initializes execution environments to reduce the number of cold start invocations. For example, Lambda might initialize a new execution environment to replace an execution environment that is about to be shut down. If a pre-initialized execution environment becomes available while Lambda is initializing a new execution environment to process an invocation, Lambda can use the pre-initialized execution environment.")),(0,i.kt)("p",null,"This means the ",(0,i.kt)("a",{parentName:"p",href:"#monitoring-with-cloudwatch"},"Monitoring with CloudWatch")," is just half the picture. But how much is your application potentially benefiting from proactive inits? Since ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rails-lambda/lamby/pull/169"},"Lamby v5.1.0"),", you can now find out easily using CloudWatch Metrics. To turn metrics on, enable the config like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rails",metastring:'title="config/environments/production.rb"',title:'"config/environments/production.rb"'},"config.lamby.cold_start_metrics = true\n")),(0,i.kt)("p",null,"Lamby will now publish ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html"},"CloudWatch Embedded Metrics")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Lamby")," namespace with a custom dimension for each application's name. Captured metrics include counts for Cold Starts vs. Proactive Initializations. Here is an example running sum of 3 days of data for a large Rails application in the ",(0,i.kt)("inlineCode",{parentName:"p"},"us-east-1")," region."),(0,i.kt)(o.Z,{alt:"Rails in Lambda Concurrent Executions, Invocations, and Provisioned Executions & Spill Invokes",sources:{light:(0,r.Z)("/img/docs/lamby-cloud-watch-metrics-cold-start-v-proactive-init-light.png"),dark:(0,r.Z)("/img/docs/lamby-cloud-watch-metrics-cold-start-v-proactive-init-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("p",null,"This data shows the vast majority of your initialized Lambda Contaienrs are proactively initialized. Hence, no cold starts are felt by end users or consumers of your function. If you need to customize the name of your Rails application in the CloudWatch Metrics dimension, you can do so using this config."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rails",metastring:'title="config/environments/production.rb"',title:'"config/environments/production.rb"'},"config.lamby.metrics_app_name = 'MyServiceName'\n")))}d.isMDXComponent=!0}}]);