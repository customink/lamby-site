"use strict";(self.webpackChunklamby=self.webpackChunklamby||[]).push([[91],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>y});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return a?n.createElement(y,i(i({ref:t},u),{},{components:a})):n.createElement(y,i({ref:t},u))}));function y(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},304:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294);const o={anatomy:"How Lamby Works",cpu:"CPU Architecture",environment:"ENV Variables & Secrets",assets:"JavaScript & Assets",deploy:"Build & Deploy","custom-domain":"Custom Domain Names",activejob:"ActiveJob & Background Processing",observability:"Logging & Observability",database:"Database & VPCs",webservers:"Web Proxy Integrations"};function r(e){let{id:t,name:a,anchor:r}=e;const i=a||o[t]||t.replace(/(_|-)/g," ").split(" ").map((e=>e.charAt(0).toUpperCase()+e.toLowerCase().slice(1))).join(" ");return r?n.createElement("a",{href:`/docs/${t}#${r}`},i):n.createElement("a",{href:`/docs/${t}`},i)}},9014:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(7462),o=(a(7294),a(3905)),r=a(304);const i={id:"database",title:"Database & VPCs",toc_max_heading_level:2},s="Database & VPCs",l={unversionedId:"database",id:"database",title:"Database & VPCs",description:"Any database supported by Ruby or Rails can be used with Lambda assuming your VPC/Network allows those connections. This guide will not get into the details on how to setup or use various databases options within AWS itself like RDS, Aurora, or DynamoDB. However, we will address a few high level topics along with some conventions in our  project.",source:"@site/docs/database.mdx",sourceDirName:".",slug:"/database",permalink:"/docs/database",draft:!1,editUrl:"https://github.com/customink/lamby-site/tree/master/docs/database.mdx",tags:[],version:"current",frontMatter:{id:"database",title:"Database & VPCs",toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"ENV Variables & Secrets",permalink:"/docs/environment"},next:{title:"JavaScript & Assets",permalink:"/docs/assets"}},c={},u=[{value:"Our Cookiecutter",id:"our-cookiecutter",level:2},{value:"VPC Configuration",id:"vpc-configuration",level:2},{value:"Database Migrations",id:"database-migrations",level:2},{value:"Using DynamoDB",id:"using-dynamodb",level:2}],d={toc:u};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"database--vpcs"},"Database & VPCs"),(0,o.kt)("p",null,"Any database supported by Ruby or Rails can be used with Lambda assuming your VPC/Network allows those connections. This guide will not get into the details on how to setup or use various databases options within AWS itself like RDS, Aurora, or DynamoDB. However, we will address a few high level topics along with some conventions in our ",(0,o.kt)(r.Z,{id:"quick-start",name:"cookiecutter",mdxType:"DocLink"})," project."),(0,o.kt)("h2",{id:"our-cookiecutter"},"Our Cookiecutter"),(0,o.kt)("p",null,"Our ",(0,o.kt)(r.Z,{id:"quick-start",mdxType:"DocLink"})," project does not create a database but it does have a MySQL service attached to the dev container to faciliate quickly iterating toward using one. The two key files' snippets are below. If you decide to use switch to a different database like PostgreSQL, make adjustments to these files and your ",(0,o.kt)("inlineCode",{parentName:"p"},"Gemfile")," as needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/database.yml"',title:'"config/database.yml"'},'default: &default\n  adapter: mysql2\n  username: root\n  password: <%= ENV["MYSQL_ROOT_PASSWORD"] %>\n  host: <%= ENV.fetch("MYSQL_HOST") { "localhost" } %>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".devcontainer/docker-compose.yml"',title:'".devcontainer/docker-compose.yml"'},"services:\n  app:\n    environment:\n      - MYSQL_HOST=mysql\n      - MYSQL_ROOT_PASSWORD=root\n")),(0,o.kt)("h2",{id:"vpc-configuration"},"VPC Configuration"),(0,o.kt)("p",null,"Most Rails applications within AWS are deployed to a private subnet(s) within a VPC which allows you to have direct network access to your relational database. For most folks, this is ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html"},"the default VPC")," which means finding your subnet ids and security groups are fairly easy. Once you have those, add this ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-vpcconfig.html"},"VpcConfig")," to your project's ",(0,o.kt)("inlineCode",{parentName:"p"},"template.yaml")," file within the existing globals section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yaml"',title:'"template.yaml"'},"Globals:\n  Function:\n    VpcConfig:\n      SubnetIds:\n        - subnet-09792e6cd06dd59ad\n        - subnet-0501f3136415021da\n      SecurityGroupIds:\n        - sg-07be99aff5fb14557\n")),(0,o.kt)("p",null,"Adding it here will ensure every function within your stack has a common VPC setting. Using a ",(0,o.kt)("inlineCode",{parentName:"p"},"VpcConfig")," should automatically add the ",(0,o.kt)("inlineCode",{parentName:"p"},"AWSLambdaVPCAccessExecutionRole")," managed policy to your Lambda's execution role. If not, you can manually add it to your ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-policies"},(0,o.kt)("inlineCode",{parentName:"a"},"Policies"))," section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yaml"',title:'"template.yaml"'},"RailsLambda:\n  Properties:\n    Policies:\n      # highlight-next-line\n      - AWSLambdaVPCAccessExecutionRole\n")),(0,o.kt)("h2",{id:"database-migrations"},"Database Migrations"),(0,o.kt)("p",null,"Please see the ",(0,o.kt)(r.Z,{id:"running-tasks",mdxType:"DocLink"})," guide on how to use Lamby's task runner for migrations or other on-demand tasks like Rake."),(0,o.kt)("h2",{id:"using-dynamodb"},"Using DynamoDB"),(0,o.kt)("p",null,"In some cases Rails with DynamoDB is an excellent choice. If this sounds right for you, I highly recommend using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aws/aws-sdk-ruby-record"},"Aws::Record")," gem which leverages the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-sdk-dynamodb")," in a very Rails like ActiveModel way. Please ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/customink/lamby/issues/new"},"share your stories")," with us."))}p.isMDXComponent=!0}}]);