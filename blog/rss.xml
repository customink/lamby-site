<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lamby - Simple Rails &amp; AWS Lambda Integration using Rack Blog</title>
        <link>https://lamby.cloud/blog</link>
        <description>Lamby - Simple Rails &amp; AWS Lambda Integration using Rack Blog</description>
        <lastBuildDate>Sun, 16 Jul 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Goodbye Cold Starts, Hello Proactive Initialization]]></title>
            <link>https://lamby.cloud/blog/2023/07/16/goodbye-cold-starts-hello-proactive-initilizations</link>
            <guid>/2023/07/16/goodbye-cold-starts-hello-proactive-initilizations</guid>
            <pubDate>Sun, 16 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[As described in AJ Stuyvenberg's post on the topic Understanding AWS Lambda Proactive Initialization, AWS Lambda may have solved some of your cold start issues for you since March 2023. Stated in an excerpt from AWS' docs:]]></description>
            <content:encoded><![CDATA[<p>As described in <a href="https://twitter.com/astuyve" target="_blank" rel="noopener noreferrer">AJ Stuyvenberg's</a> post on the topic <a href="https://aaronstuyvenberg.com/posts/understanding-proactive-initialization" target="_blank" rel="noopener noreferrer">Understanding AWS Lambda Proactive Initialization</a>, AWS Lambda may have solved some of your cold start issues for you since March 2023. Stated in an excerpt <a href="https://aaronstuyvenberg.com/posts/understanding-proactive-initialization" target="_blank" rel="noopener noreferrer">from AWS' docs</a>:</p><blockquote><p>For functions using unreserved (on-demand) concurrency, Lambda occasionally pre-initializes execution environments to reduce the number of cold start invocations. For example, Lambda might initialize a new execution environment to replace an execution environment that is about to be shut down. If a pre-initialized execution environment becomes available while Lambda is initializing a new execution environment to process an invocation, Lambda can use the pre-initialized execution environment.</p></blockquote><p>This means the <a href="#monitoring-with-cloudwatch">Monitoring with CloudWatch</a> is just half the picture. But how much is your application potentially benefiting from proactive inits? Since <a href="https://github.com/rails-lambda/lamby/pull/169" target="_blank" rel="noopener noreferrer">Lamby v5.1.0</a>, you can now find out easily using CloudWatch Metrics. To turn metrics on, enable the config like so:</p><div class="language-rails codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">config/environments/production.rb</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rails codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">config.lamby.cold_start_metrics = true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Lamby will now publish <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html" target="_blank" rel="noopener noreferrer">CloudWatch Embedded Metrics</a> in the <code>Lamby</code> namespace with a custom dimension for each application's name. Captured metrics include counts for Cold Starts vs. Proactive Initializations. Here is an example running sum of 3 days of data for a large Rails application in the <code>us-east-1</code> region.</p><img src="/img/docs/lamby-cloud-watch-metrics-cold-start-v-proactive-init-light.png" alt="A CloudWatch Metrics graph showing a running sum of cold starts vs proactive inits for a large Rails application on Lambda" class="themedImage_ToTc themedImage--light_HNdA"><img src="/img/docs/lamby-cloud-watch-metrics-cold-start-v-proactive-init-dark.png" alt="A CloudWatch Metrics graph showing a running sum of cold starts vs proactive inits for a large Rails application on Lambda" class="themedImage_ToTc themedImage--dark_i4oU"><p>This data shows the vast majority of your initialized Lambda Containers are proactively initialized. Hence, no cold starts are felt by end users or consumers of your function. If you need to customize the name of your Rails application in the CloudWatch Metrics dimension, you can do so using this config.</p><div class="language-rails codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">config/environments/production.rb</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rails codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">config.lamby.metrics_app_name = 'MyServiceName'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>rails</category>
            <category>lambda</category>
            <category>cold-starts</category>
            <category>initialization</category>
        </item>
        <item>
            <title><![CDATA[The Elusive Lambda Console; A Specification Proposal.]]></title>
            <link>https://lamby.cloud/blog/the-elusive-lambda-console-a-specification-proposal</link>
            <guid>the-elusive-lambda-console-a-specification-proposal</guid>
            <pubDate>Sat, 17 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[After years of smashing Cloud & Rails together, I've come up with an idea. Better than an idea, a working specification! One where us Rails & Lambda enthusiasts can once again "console into" our "servers" and execute CLI tasks like migrations or interact via our beloved IRB friend, the Rails console. Today, I would like to present, the Lambda Console project. An open specification proposal for any AWS Lambda runtime to adopt.]]></description>
            <content:encoded><![CDATA[<a href="https://github.com/rails-lambda/lambda-console" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="/assets/images/header-0b81fd83e6fbc1b5952e0cb0b0ba81fe.png" class="img_ev3q"></a><p>After years of smashing Cloud &amp; Rails together, I've come up with an idea. Better than an idea, a working specification! One where us <a href="https://lamby.cloud" target="_blank" rel="noopener noreferrer">Rails &amp; Lambda</a> enthusiasts can once again "console into" our "servers" and execute CLI tasks like migrations or interact via our beloved IRB friend, the Rails console. Today, I would like to present, the <a href="https://github.com/rails-lambda/lambda-console" target="_blank" rel="noopener noreferrer">Lambda Console</a> project. An open specification proposal for any AWS Lambda runtime to adopt.</p><a href="https://github.com/rails-lambda/lambda-console" target="_blank" rel="noopener noreferrer"><img src="/img/docs/lambda-console-cli-light.png" alt="Lamby: Simple Rails &amp; AWS Lambda Integration using Rack" class="themedImage_ToTc themedImage--light_HNdA"><img src="/img/docs/lambda-console-cli-dark.png" alt="Lamby: Simple Rails &amp; AWS Lambda Integration using Rack" class="themedImage_ToTc themedImage--dark_i4oU"></a><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lambda-console">Lambda Console<a class="hash-link" href="#lambda-console" title="Direct link to heading">​</a></h2><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -g lambda-console-cli</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The Lambda Console is a CLI written in Node.js that will interactively create an AWS SDK session for you to invoke your Lambda functions with two types of modes. </p><ol><li>CLI Runner</li><li>Interactive Commands</li></ol><p>Think of the CLI Runner as a bash prompt. You can run any process command or interact with the filesystem or environment. For Rails users, running rake tasks or DB migrations. These tasks assume the Lambda task root as the present working directory.</p><p>Interactive commands however are evaluated in the context of your running application. For Ruby and Rails applications, this simulates IRB (Interactive Ruby Shell). For <a href="https://lamby.cloud" target="_blank" rel="noopener noreferrer">Lamby</a> users, this mode simulates the Rails console. Making it easy for users to query their DB or poke their models and code.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-proposal">The Proposal<a class="hash-link" href="#the-proposal" title="Direct link to heading">​</a></h2><p>There is nothing about the <a href="https://github.com/rails-lambda/lambda-console" target="_blank" rel="noopener noreferrer">Lambda Console</a> that is coupled to Ruby or Rails. The idea is simple, as a Lambda community, could we do the following?</p><ol><li>Finalize a Lambda Console request/response specification.</li><li>Create more runtime-specific language implementations.</li><li>Build an amazing CLI client for any runtime.</li></ol><p>Here is what we have today. The request specification, a simple <a href="https://github.com/rails-lambda/lambda-console#event-structure" target="_blank" rel="noopener noreferrer">event structure</a> that is only a few dozen lines of JSON schema.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"X_LAMBDA_CONSOLE"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"run"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cat /etc/os-release"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"X_LAMBDA_CONSOLE"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"interact"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"User.find(1)"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Any Lambda runtime code or framework could implement the handling of these event in their own language-specific pakages. You can find the Ruby implementation of these in the Lambda Console's first reference implementations.</p><ul><li>Ruby: The <a href="https://github.com/rails-lambda/lambda-console-ruby" target="_blank" rel="noopener noreferrer">lambda-console-ruby</a> gem for any Ruby Lambda.</li><li>Rails: Integrated into the <a href="https://github.com/rails-lambda/lamby" target="_blank" rel="noopener noreferrer">Lamby</a> v5.0.0 for Rails on Lambda.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-possibilities">The Possibilities<a class="hash-link" href="#the-possibilities" title="Direct link to heading">​</a></h2><p>What I really want is an amazing CLI client. The current Lambda Console CLI was hacked together in a few days using some amazing Node.js tools that make building interactive CLIs so so easy. But I've never done this before. If this type of tooling sounds interesting to you and you like Node.js, let me know! It would be amazing to see implementation packages for these for Node, PHP, Python, and other frameworks using these languages. Here are some ideas on where I could see this going.</p><p><strong>Live STDOUT &amp; STDERR:</strong> We could take advantage of Lambda's new <a href="https://aws.amazon.com/blogs/compute/introducing-aws-lambda-response-streaming/" target="_blank" rel="noopener noreferrer">Response Streaming</a> and send output buffers as they happen. </p><p><strong>Pseudo TTY:</strong> Is there a way to better simulate a real TTY session? Could this even include ANSI colors?</p><p><strong>Quality of Life Improvements:</strong> Everything from, Allowing the CLI tool to switch modes without restarting it; Creating a command buffer to up arrow navigate history; Prettier UI. </p><p><strong>Formal Response JSON Schema:</strong> As the features grow, should the response JSON be standardized? For example, if the client wanted to syntax highlight interactive language commands, how would it know what language was being used? We could have a <code>X_LAMBDA_CONSOLE_LANG</code> response header.</p><p>What else would you like to see in a Lambda Console client?</p>]]></content:encoded>
            <category>rails</category>
            <category>lambda</category>
            <category>console</category>
            <category>specification</category>
            <category>runner</category>
            <category>tasks</category>
            <category>interaction</category>
        </item>
        <item>
            <title><![CDATA[Using Tailscale on Lambda for a Live Development Proxy]]></title>
            <link>https://lamby.cloud/blog/tailscale-extension-for-lambda-containers</link>
            <guid>tailscale-extension-for-lambda-containers</guid>
            <pubDate>Sat, 03 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Tailscale makes networking easy. Like really easy. It shines in situations where private networks do not allow inbound connections.]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="https://lamby.cloud/img/blog/tailscale/header.png" alt="Using Tailscale on Lambda for a Live Development Proxy" class="img_ev3q"></p><p>⚠️ DISCLAIMER: In no way am I advocating for the use of live proxies as a normal way to develop against cloud resources. However in some edge cases, such as developing a new system, live dev proxies or the general use of Tailscale in Lambda could be useful.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-tailscale-on-lambda">🐋 Tailscale on Lambda<a class="hash-link" href="#-tailscale-on-lambda" title="Direct link to heading">​</a></h2><p><a href="https://tailscale.com" target="_blank" rel="noopener noreferrer">Tailscale</a> makes networking easy. Like really easy. It shines in situations where private networks do not allow inbound connections. Tailscale can connect your devices and development environments for easy access to remote resources, or allow those remote systems to access your home or office network devices.</p><p>A few years ago Corey Quinn wrote a Tailscale <a href="https://www.lastweekinaws.com/blog/corey-writes-open-source-code-for-lambda-and-tailscale/" target="_blank" rel="noopener noreferrer">Lambda Extension</a>. It is great and helped a lot of folks. Today, I'd like to share a new project based on Corey's work that makes it even easier to use Tailscale in Lambda Container. Check it out here.</p><p><strong><a href="https://github.com/rails-lambda/tailscale-extension" target="_blank" rel="noopener noreferrer">🔗 Tailscale Lambda Extension for Containers</a></strong> on GitHub 🐙</p><p>This new version tries to improve upon Corey's work. Initialization is now stable, there are more configuration options, and we even have multi-platform Docker container packages for both <code>x86_64</code> and <code>arm64</code>. We even have Amazon Linux 2 and Debian/Ubuntu variants. Installation is really easy, simply add one line to your Dockerfile. For example:</p><div class="language-dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dockerfile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token instruction keyword" style="color:#00009f">FROM</span><span class="token instruction"> public.ecr.aws/lambda/ruby:3.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">RUN</span><span class="token instruction"> yum install -y curl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">COPY</span><span class="token instruction"> </span><span class="token instruction options property" style="color:#36acaa">--from</span><span class="token instruction options punctuation" style="color:#393A34">=</span><span class="token instruction options string" style="color:#e3116c">ghcr.io/rails-lambda/tailscale-extension-amzn:1</span><span class="token instruction"> /opt /opt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Once your container starts, taking to any device within your tailnet can be done by using the local <a href="https://en.wikipedia.org/wiki/SOCKS" target="_blank" rel="noopener noreferrer">SOCKS5</a> proxy. In the example below, we are using Ruby's <a href="https://github.com/astro/socksify-ruby" target="_blank" rel="noopener noreferrer">socksify</a> gem.</p><div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">require</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'socksify/http'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Net</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">HTTP</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">socks_proxy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">'localhost'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1055</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">http</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># your http code here...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-actioncable-on-lambda">🔌 ActionCable on Lambda<a class="hash-link" href="#-actioncable-on-lambda" title="Direct link to heading">​</a></h2><p>How did I use Tailscale for the <a href="https://lamby.cloud" target="_blank" rel="noopener noreferrer">Rails on Lambda</a> work? A few months ago, I <a href="https://twitter.com/metaskills/status/1647714842550185985" target="_blank" rel="noopener noreferrer">started work</a> on the last critical part of the Rails ecosystem which did not work on Lambda... <a href="https://guides.rubyonrails.org/action_cable_overview.html" target="_blank" rel="noopener noreferrer">ActionCable</a> &amp; WebSockets. Specifically, I wanted <a href="https://hotwired.dev" target="_blank" rel="noopener noreferrer">Hotwire</a> to work.</p><p>So far, everything is <a href="https://twitter.com/metaskills/status/1651067256242151424" target="_blank" rel="noopener noreferrer">working great</a> with our new LambdaCable gem. Eventually it will be a drop-in adapter for ActionCable and join the ranks of other popular alternatives like <a href="https://anycable.io" target="_blank" rel="noopener noreferrer">AnyCable</a>. To bring the project to completion faster, I needed feedback loops that were much faster than deploying code to the cloud. I needed a development proxy! One where my Rails application would receive events from both Lambda's Function URLs and the WebSocket events from API Gateway. Illustrated below with a demo video.</p><p><img loading="lazy" src="https://lamby.cloud/img/blog/tailscale/live-development-proxy-overview.png" alt="Architecture diagram of the use of a Lambda development proxy for WebSockets with API Gateway." class="img_ev3q"></p><div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/k02k38o4ih8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe></div><p>If you are curious to learn more about how Rails &amp; Lambda work together, check out our <a href="https://lamby.cloud" target="_blank" rel="noopener noreferrer">Lamby</a> project. The architecture of Lambda Containers works so well with Rails since our framework distills everything from HTTP, Jobs, Events, &amp; WebSocket connections down to Docker's <code>CMD</code> interface. The architecture above at the proxy layer was easy to build and connect up to our single delegate function, <code>Lamby.cmd</code>. Shown below:</p><p><img loading="lazy" src="https://lamby.cloud/img/blog/tailscale/live-development-proxy-detail.png" alt="Architecture diagram of the use of a Lambda development proxy for WebSockets with API Gateway." class="img_ev3q"></p><p>For our Rails application on Lambda, here are the changes we made to leverage this. All outlined in our <a href="https://github.com/rails-lambda/websocket-demo/pull/4" target="_blank" rel="noopener noreferrer">WebSockets Demo Pull Request</a>.</p><ul><li>Created a <code>.localdev</code> folder. Added a copy of our SAM template.yaml for all AWS Resources.</li><li>Made a simple <code>.localdev/Dockerfile</code> that included the Tailscale Extension along with basic proxy code.</li><li>Leveraged Lamby's <a href="https://github.com/rails-lambda/lamby/pull/164" target="_blank" rel="noopener noreferrer">Local Development Proxy Sever</a>.</li><li>Ensured our Devcontainers exposed port 3000 to all local network devices so Tailscale could detect the service.</li></ul><p>I hope you find reasons to learn more about Tailscale and how using a SOCKS5 proxy from Lambda could help your development or production needs. More so, I hope you like the new Lambda Extension project of ours making it easy for containerized applications to use. Drop us a comment if you do.</p><p><strong><a href="https://github.com/rails-lambda/tailscale-extension" target="_blank" rel="noopener noreferrer">🔗 Tailscale Lambda Extension for Containers</a></strong> on GitHub 🐙</p>]]></content:encoded>
            <category>tailscale</category>
            <category>websockets</category>
            <category>lambda</category>
            <category>extension</category>
            <category>container</category>
        </item>
        <item>
            <title><![CDATA[Welcome Lamby v4!]]></title>
            <link>https://lamby.cloud/blog/welcome-to-lamby-v4</link>
            <guid>welcome-to-lamby-v4</guid>
            <pubDate>Mon, 19 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I am incredibly happy to announcy Lamby v4 and a major update to our documentation website. Huge shout out to Docusaurus which has made in my opinion the best content-driven static site generator for open-source projects like our Lamby community.]]></description>
            <content:encoded><![CDATA[<p>I am incredibly happy to announcy Lamby v4 and a major update to our documentation website. Huge shout out to <a href="https://docusaurus.io" target="_blank" rel="noopener noreferrer">Docusaurus</a> which has made in my opinion the best content-driven static site generator for open-source projects like our Lamby community.</p><img src="/img/lamby-rails-containers.jpg" alt="Lamby: Simple Rails &amp; AWS Lambda Integration using Rack" class="themedImage_ToTc themedImage--light_HNdA"><img src="/img/lamby-rails-dark.jpg" alt="Lamby: Simple Rails &amp; AWS Lambda Integration using Rack" class="themedImage_ToTc themedImage--dark_i4oU"><p>So what is new and will v4 break anything? Lots! Mostly new ways of thinking around the same basic architecture. Nothing should break either. Lamby v4's semver change is mostly marketing driven. Here is a short list of what is new.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="updated-starter">Updated Starter<a class="hash-link" href="#updated-starter" title="Direct link to heading">​</a></h2><p>Want to see all this new stuff in action? Use our <a href="/docs/quick-start">Quick Start</a> guide to deploy a new Rails application to AWS Lambda in 5min ⏱️.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bring-your-own-containers">Bring Your Own Containers<a class="hash-link" href="#bring-your-own-containers" title="Direct link to heading">​</a></h2><p>Lamby still works with the Zip packaging format, but all documentation on how to use it has been removed. Containers are here to stay and their value goes way past a simple packaging format.</p><p>We now encourage bringing your own containers by using Lambda's Runtime Interface Client (RIC). The RIC allows us to use Docker's <code>CMD</code> to load Rails and invoke a function. In this case we are loading our Rails application through its config/environment.rb file (.rb extension is implied) and once that is done, calling the new <code>Lamby.cmd</code> as the Lambda handler. No more <code>app.rb</code>
file needed!</p><div class="language-docker codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Dockerfile</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-docker codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token instruction keyword" style="color:#00009f">FROM</span><span class="token instruction"> ruby:3.2-bullseye</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">RUN</span><span class="token instruction"> gem install </span><span class="token instruction string" style="color:#e3116c">'aws_lambda_ric'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">ENTRYPOINT</span><span class="token instruction"> [ </span><span class="token instruction string" style="color:#e3116c">"/usr/local/bundle/bin/aws_lambda_ric"</span><span class="token instruction"> ]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">CMD</span><span class="token instruction"> [</span><span class="token instruction string" style="color:#e3116c">"config/environment.Lamby.cmd"</span><span class="token instruction">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="secrets-with-crypteia">Secrets with Crypteia<a class="hash-link" href="#secrets-with-crypteia" title="Direct link to heading">​</a></h2><p>The <a href="https://github.com/rails-lambda/crypteia" target="_blank" rel="noopener noreferrer">Crypteia</a> package is Rust Lambda Extension for any Runtime/Container to preload SSM Parameters as secure environment variables. It takes advantages of <code>LD_PRELOAD</code> to seamlessly fetch values from SSM when a process starts and then injects them as natively accesible Ruby <code>ENV</code> variables. Our <a href="/docs/quick-start">Quick Start</a> guide's cookiecutter includes Crypteia already for you via a Docker <code>COPY</code> command into the Lambda Extension <code>/opt</code> directory.</p><div class="language-docker codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">Dockerfile</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-docker codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token instruction keyword" style="color:#00009f">FROM</span><span class="token instruction"> ruby:3.2-bullseye</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#393A34"><span class="token plain"></span><span class="token instruction keyword" style="color:#00009f">COPY</span><span class="token instruction"> </span><span class="token instruction options property" style="color:#36acaa">--from</span><span class="token instruction options punctuation" style="color:#393A34">=</span><span class="token instruction options string" style="color:#e3116c">ghcr.io/rails-lambda/crypteia-extension-debian:1</span><span class="token instruction"> /opt /opt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Usage is simply done by adding variables to your SAM template and accessing the values fetched from SSM like any other environment variable. Please read the Crypteia's <a href="https://github.com/rails-lambda/crypteia" target="_blank" rel="noopener noreferrer">documentation</a> for full details.</p><div class="language-title=&quot;template.yaml&quot; codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-title=&quot;template.yaml&quot; codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Globals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Environment:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Variables:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      SECRET: x-crypteia-ssm:/myapp/SECRET</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token constant" style="color:#36acaa">ENV</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string-literal string" style="color:#e3116c">'SECRET'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 1A2B3C4D5E6F</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="development-containers">Development Containers<a class="hash-link" href="#development-containers" title="Direct link to heading">​</a></h2><p>Described in the <a href="/docs/quick-start">Quick Start</a> guide, our Lamby starter makes use of the <a href="https://containers.dev" target="_blank" rel="noopener noreferrer">Development Container</a> specification via a <a href="https://github.com/rails-lambda/lamby-cookiecutter/tree/master/%7B%7Bcookiecutter.project_name%7D%7D/.devcontainer" target="_blank" rel="noopener noreferrer"><code>.devcontainer</code></a> directory. Commonly used with Codespaces, dev containers can be used locally with any editor.</p><p>Our dev container's <code>Dockerfile</code> uses the same base image as the one at the root of your project. This helps ensure your development experience, like installing system dependencies and Ruby gems with native extensions, aligns with the same process as your production image.</p><p>We also leverage the devcontainer's <code>dockerComposeFile</code> capability to include a MySQL service as well. The Lamby starter also includes a range of <a href="https://containers.dev/features" target="_blank" rel="noopener noreferrer">devcontainer features</a> which are installed within the Ubuntu development image. For example, Node, Docker in Docker, SSH, and the AWS CLI &amp; SAM CLI.</p>]]></content:encoded>
            <category>rails</category>
            <category>lambda</category>
            <category>containers</category>
        </item>
    </channel>
</rss>